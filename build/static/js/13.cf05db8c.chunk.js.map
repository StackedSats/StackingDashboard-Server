{"version":3,"sources":["components/address-modal.js","delegation/utils.js","delegation/1.delegatestx.js","delegation/2.delegationLock.js","delegation/readOnlyFunciton.js","delegation/getStackerInfo.js","pages/MyPortfolio.js","components/right.js","components/Chart/ChartCard.js","components/Chart/ChartLegend.js","components/ContextNav.js","components/Typography/PageTitle.js"],"names":["Modals","openAddressModal","closeAddressModal","openManualAddressModal","closeManualAddressModal","isAddressModalOpen","isManualAddressModalOpen","addBTCAddress","addAddress","setStxAddress","stxAddress","state","useSelector","user","className","onClick","isOpen","onClose","placeholder","onChange","e","target","value","map","index","width","size","decodeBtcAddress","btcAddress","hashMode","startsWith","address","fromBech32","data","length","AddressHashMode","SerializeP2WSH","SerializeP2WPKH","fromBase58Check","version","SerializeP2PKH","SerializeP2SH","Error","getAddressHashMode","hash","Buffer","buffer","a","poxAddr","amountSTX","delegateToo","burnHt","hashModeBuffer","bufferCV","BN","toArrayLike","hashbytes","poxAddressCV","tupleCV","console","log","options","contractAddress","contractName","functionName","functionArgs","uintCV","standardPrincipalCV","noneCV","appDetails","name","icon","logo","finished","txId","txRaw","openContractCall","delegateSTX","delegationLock","stxValue","delegateStx","htLockPeriod","amountustx","username","getPerson","_profile","axios","url","process","method","headers","localStorage","getItem","txids","delegateStxLock","Contract","SmartContractsApi","readOnlyFunctionArgs","contract","callReadOnlyFunction","MenuIcon","aria-label","aria-haspopup","MenuItems","stx","btc","dispatch","useDispatch","deleteAddress","makeTheCal","payload","type","userDetails","lineLegends","title","color","Left","Date","toLocaleDateString","MyPortfolio","prices","useState","txs","setTxs","balance","total_sent","total_received","total_fees_sent","total_miner_rewards_received","lock_tx_id","locked","lock_height","burnchain_lock_height","burnchain_unlock_height","portfolio","setPortfolio","addressValue","setaddressValue","message","showBTCMessage","addaddress","showAddAddress","dailyReward","setDailyReward","dateForGraph","setDateForGraph","rewardForGraph","setRewardForGraph","setIsAddressModalOpen","setIsManualAddressModalOpen","setSTX","lineOptions","labels","datasets","backgroundColor","borderColor","fill","responsive","tooltips","mode","intersect","hover","scales","x","display","scaleLabel","labelString","y","legend","useEffect","get","result","values","post","graph","date","reward","claimReward","status","vs","i","push","fetchData","getStackerInfor","claim","onStack","fee","delegateLock","PageTitle","left","right","totalBTCReward","pendingBTCReward","ChartCard","from","to","parseFloat","stxusd","btcusd","toFixed","href","reduce","b","ContextNav","menuItems","buttonIcon","Right","liquidStxSupplyResult","toLocaleString","useGrouping","Chart","children","ChartLegend","legends","key","isContextMenuOpen","setIsContextMenuOpen","show"],"mappings":"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","file":"static/js/13.cf05db8c.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nimport PageTitle from \"../components/Typography/PageTitle\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { MainNet } from \"../icons\";\nimport { FiTrash2, FiCopy } from \"react-icons/fi\";\nimport { VscArrowSmallRight } from \"react-icons/vsc\";\nimport {\n  Modal,\n  ModalHeader,\n  ModalBody,\n  Button,\n  Input,\n  Label,\n} from \"@windmill/react-ui\";\n\nfunction Modals({\n  openAddressModal,\n  closeAddressModal,\n  openManualAddressModal,\n  closeManualAddressModal,\n  isAddressModalOpen,\n  isManualAddressModalOpen,\n  addBTCAddress,\n  addAddress,\n  stxAddress,\n  setStxAddress,\n}) {\n  const state = useSelector((state) => state.user);\n  return (\n    <>\n      <div className=\"my-6 space-y-6\">\n        <div>\n          <Button onClick={openAddressModal}>Address Modal</Button>\n        </div>\n        <div>\n          <Button onClick={openManualAddressModal}>Manual Address Modal</Button>\n        </div>\n\n        <Modal isOpen={isAddressModalOpen} onClose={closeAddressModal}>\n          <ModalHeader className=\"mb-10 text-center\">\n            <h2 className=\"mb-2 text-2xl\">Add your Address</h2>\n            <p>Add your BTC address to start stacking your assets</p>\n          </ModalHeader>\n          <ModalBody>\n            <div className=\"my-4\">\n              <Label>Enter BTC address</Label>\n              <div className=\"relative flex mt-2\">\n                <Input\n                  className=\"border-0 bg-gray-50\"\n                  placeholder=\"Enter your address here\"\n                  onChange={(e) => {\n                    addBTCAddress(e.target.value);\n                  }}\n                />\n                <button\n                  className=\"px-6 ml-2 btn btn-primary\"\n                  onClick={addAddress}\n                >\n                  Add\n                </button>\n              </div>\n            </div>\n          </ModalBody>\n        </Modal>\n\n        <Modal\n          isOpen={isManualAddressModalOpen}\n          onClose={closeManualAddressModal}\n        >\n          <ModalBody>\n            <div className=\"my-4\">\n              <Label className=\"text-xl\">Manually add address</Label>\n              <div className=\"relative flex mt-2\">\n                <Input\n                  className=\"border-0 bg-gray-50\"\n                  placeholder=\"Enter your address here\"\n                  onChange={(e) => {\n                    setStxAddress(e.target.value);\n                  }}\n                />\n                <button\n                  className=\"px-6 ml-2 btn btn-primary\"\n                  onClick={addAddress}\n                >\n                  Add\n                </button>\n              </div>\n              <h2 className=\"mt-8 mb-2 text-2xl\">Saved Addresses</h2>\n              <p className=\"text-base text-gray-400\">\n                These addreses will be monitored on the dashboard. You can\n                remove them at anytime.\n              </p>\n              <ul className=\"mt-6 mb-12\">\n                {state.stxAddress.map((value, index) => {\n                  return (\n                    <li className=\"flex items-center justify-between py-4 border-b border-gray-100\">\n                      <div className=\"flex items-center justify-between text-lg\">\n                        <MainNet width=\"32\" />\n                        <span className=\"ml-4\">{value}</span>\n                      </div>\n                      <div className=\"flex items-center justify-between space-x-2 text-primary-500\">\n                        <button>\n                          <FiCopy size={20} />\n                        </button>\n                        <button>\n                          <FiTrash2 size={20} />\n                        </button>\n                      </div>\n                    </li>\n                  );\n                })}\n              </ul>\n              <button className=\"text-xl font-medium text-success-500 btn-icon text-md\">\n                Go to Dashboard <VscArrowSmallRight />\n              </button>\n            </div>\n          </ModalBody>\n        </Modal>\n      </div>\n    </>\n  );\n}\n\nexport default Modals;\n","import { AddressHashMode } from \"@stacks/transactions\";\nimport { address } from \"bitcoinjs-lib\";\nimport BN from \"bn.js\";\nimport { StackingErrors } from \"./constants\";\n\nexport function getAddressHashMode(btcAddress) {\n  if (btcAddress.startsWith(\"bc1\") || btcAddress.startsWith(\"tb1\")) {\n    const { data } = address.fromBech32(btcAddress);\n    if (data.length === 32) {\n      return AddressHashMode.SerializeP2WSH;\n    } else {\n      return AddressHashMode.SerializeP2WPKH;\n    }\n  } else {\n    const { version } = address.fromBase58Check(btcAddress);\n    switch (version) {\n      case 0:\n        return AddressHashMode.SerializeP2PKH;\n      case 111:\n        return AddressHashMode.SerializeP2PKH;\n      case 5:\n        return AddressHashMode.SerializeP2SH;\n      case 196:\n        return AddressHashMode.SerializeP2SH;\n      default:\n        throw new Error(\"Invalid pox address version\");\n    }\n  }\n}\n\nexport function decodeBtcAddress(btcAddress) {\n  const hashMode = getAddressHashMode(btcAddress);\n  if (btcAddress.startsWith(\"bc1\") || btcAddress.startsWith(\"tb1\")) {\n    const { data } = address.fromBech32(btcAddress);\n    return {\n      hashMode,\n      data,\n    };\n  } else {\n    const { hash } = address.fromBase58Check(btcAddress);\n    return {\n      hashMode,\n      data: hash,\n    };\n  }\n}\n\nexport function getBTCAddress(version, checksum) {\n  const btcAddress = address.toBase58Check(\n    checksum,\n    new BN(version).toNumber()\n  );\n  return btcAddress;\n}\n\nexport function getErrorString(error) {\n  // eslint-disable-next-line default-case\n  switch (error) {\n    case StackingErrors.ERR_STACKING_UNREACHABLE:\n      return \"Stacking unreachable\";\n    case StackingErrors.ERR_STACKING_INSUFFICIENT_FUNDS:\n      return \"Insufficient funds\";\n    case StackingErrors.ERR_STACKING_INVALID_LOCK_PERIOD:\n      return \"Invalid lock period\";\n    case StackingErrors.ERR_STACKING_ALREADY_STACKED:\n      return \"Account already stacked. Concurrent stacking not allowed.\";\n    case StackingErrors.ERR_STACKING_NO_SUCH_PRINCIPAL:\n      return \"Principal does not exist\";\n    case StackingErrors.ERR_STACKING_EXPIRED:\n      return \"Stacking expired\";\n    case StackingErrors.ERR_STACKING_STX_LOCKED:\n      return \"STX balance is locked\";\n    case StackingErrors.ERR_STACKING_PERMISSION_DENIED:\n      return \"Permission denied\";\n    case StackingErrors.ERR_STACKING_THRESHOLD_NOT_MET:\n      return \"Stacking threshold not met\";\n    case StackingErrors.ERR_STACKING_POX_ADDRESS_IN_USE:\n      return \"PoX address already in use\";\n    case StackingErrors.ERR_STACKING_INVALID_POX_ADDRESS:\n      return \"Invalid PoX address\";\n    case StackingErrors.ERR_STACKING_ALREADY_REJECTED:\n      return \"Stacking already rejected\";\n    case StackingErrors.ERR_STACKING_INVALID_AMOUNT:\n      return \"Invalid amount\";\n    case StackingErrors.ERR_NOT_ALLOWED:\n      return \"Stacking not allowed\";\n    case StackingErrors.ERR_STACKING_ALREADY_DELEGATED:\n      return \"Already delegated\";\n    case StackingErrors.ERR_DELEGATION_EXPIRES_DURING_LOCK:\n      return \"Delegation expires during lock period\";\n    case StackingErrors.ERR_DELEGATION_TOO_MUCH_LOCKED:\n      return \"Delegation too much locked\";\n    case StackingErrors.ERR_DELEGATION_POX_ADDR_REQUIRED:\n      return \"PoX address required for delegation\";\n    case StackingErrors.ERR_INVALID_START_BURN_HEIGHT:\n      return \"Invalid start burn height\";\n  }\n}\n","import { openContractCall } from \"@stacks/connect\";\nimport {\n  bufferCV,\n  uintCV,\n  tupleCV,\n  standardPrincipalCV,\n  noneCV,\n} from \"@stacks/transactions\";\nimport BN from \"bn.js\";\nimport logo from \"../icons/logo.svg\";\nimport { decodeBtcAddress } from \"./utils\";\nimport buffer from \"buffer\";\nimport axios from \"axios\";\nconst Buffer = buffer.Buffer;\n\nasync function delegateSTX({ poxAddr, amountSTX, delegateToo, burnHt }) {\n  const { hashMode, data } = decodeBtcAddress(poxAddr);\n  const hashModeBuffer = bufferCV(new BN(hashMode, 10).toArrayLike(Buffer));\n  const hashbytes = bufferCV(data);\n  const poxAddressCV = tupleCV({\n    hashbytes,\n    version: hashModeBuffer,\n  });\n  console.log(poxAddressCV.data);\n\n  const options = {\n    contractAddress: \"ST000000000000000000002AMW42H.pox\",\n    contractName: \"pox\",\n    functionName: \"delegate-stx\",\n    functionArgs: [\n      uintCV(amountSTX),\n      standardPrincipalCV(\"ST3K2B2FH1AYXD26WV6YZY4DAA82AZNK967BNB9BK\"),\n      noneCV(),\n      poxAddressCV,\n    ],\n\n    appDetails: {\n      name: \"StakedStats\",\n      icon: { logo },\n    },\n    finished: (data) => {\n      console.log(\"TX ID:\", data.txId);\n      console.log(\"Raw TX:\", data.txRaw);\n      return data.txId;\n    },\n  };\n\n  console.log(options);\n  await openContractCall(options);\n}\n\nexport default delegateSTX;\n","import { openContractCall } from \"@stacks/connect\";\nimport {\n  bufferCV,\n  uintCV,\n  tupleCV,\n  standardPrincipalCV,\n  noneCV,\n} from \"@stacks/transactions\";\nimport BN from \"bn.js\";\nimport logo from \"../icons/logo.svg\";\nimport { decodeBtcAddress } from \"./utils\";\nimport buffer from \"buffer\";\nimport { getPerson } from \"../scripts/auth\";\nimport axios from \"axios\";\nconst Buffer = buffer.Buffer;\n\n// ST000000000000000000002AMW42H\n// name : pox\nexport default async function delegationLock({\n  stxValue,\n  delegateStx,\n  htLockPeriod,\n  amountustx,\n  username,\n}) {\n  const poxaddr = \"n2VrgRFbKvcesbqerVtJEC8p5Lr2LQKtmB\";\n  const { hashMode, data } = decodeBtcAddress(poxaddr);\n  const hashModeBuffer = bufferCV(new BN(hashMode, 10).toArrayLike(Buffer));\n  const hashbytes = bufferCV(data);\n  console.log(hashbytes, hashModeBuffer);\n  const poxAddressCV = tupleCV({\n    hashbytes,\n    version: hashModeBuffer,\n  });\n  console.log(poxAddressCV.data);\n\n  const options = {\n    contractAddress: \"ST000000000000000000002AMW42H.pox\",\n    contractName: \"pox\",\n    functionName: \"delegate-stack-stx\",\n    functionArgs: [\n      standardPrincipalCV(getPerson()._profile.stxAddress),\n      uintCV(stxValue),\n      poxAddressCV,\n      uintCV(amountustx),\n      uintCV(htLockPeriod),\n    ],\n    appDetails: {\n      name: \"StakedStats\",\n      icon: { logo },\n    },\n    finished: (data) => {\n      console.log(\"TX ID:\", data.txId);\n      console.log(\"Raw TX:\", data.txRaw);\n      axios({\n        url: `${process.env.REACT_APP_BACKENDURL}/transactionRecords`,\n        method: \"post\",\n        headers: {\n          \"a-auth-token\": localStorage.getItem(\"auth\"),\n          \"Content-type\": \"application/json\",\n        },\n        data: {\n          username,\n          txids: { delegateStx, delegateStxLock: data.txId },\n        },\n      });\n    },\n  };\n\n  await openContractCall(options);\n}\n","import { SmartContractsApi } from \"@stacks/blockchain-api-client\";\n\nconst Contract = new SmartContractsApi();\nexport default Contract;\n","import { openContractCall } from \"@stacks/connect\";\nimport { standardPrincipalCV } from \"@stacks/transactions\";\nimport logo from \"../icons/logo.svg\";\nimport { getPerson } from \"../scripts/auth\";\nimport contract from \"./readOnlyFunciton\";\n\n// ST000000000000000000002AMW42H\n// name : pox\nexport default async function delegationLock() {\n  const options = {\n    contractAddress: \"SP000000000000000000002Q6VF78.pox\",\n    contractName: \"pox\",\n    functionName: \"get-stacker-info\",\n    readOnlyFunctionArgs: [\n      standardPrincipalCV(getPerson()._profile.stxAddress),\n    ],\n    // appDetails: {\n    //   name: \"StakedStats\",\n    //   icon: { logo },\n    // },\n    // finished: (data) => {\n    //   console.log(\"TX ID:\", data.txId);\n    //   console.log(\"Raw TX:\", data.txRaw);\n    // },\n  };\n  console.log(\"trying..\");\n  await contract.callReadOnlyFunction(options);\n}\n","import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport PageTitle from \"../components/Typography/PageTitle\";\nimport {\n  Card,\n  CardBody,\n  Select,\n  Table,\n  TableHeader,\n  TableCell,\n  TableBody,\n  TableRow,\n  TableContainer,\n  Input,\n} from \"@windmill/react-ui\";\nimport {\n  FiTrash2,\n  FiCopy,\n  FiSettings,\n  FiInfo,\n  FiDownload,\n  FiArrowRight,\n} from \"react-icons/fi\";\n\nimport ChartCard from \"../components/Chart/ChartCard\";\nimport { Doughnut, Line, Bar } from \"react-chartjs-2\";\nimport ChartLegend from \"../components/Chart/ChartLegend\";\n\nimport { userDetails } from \"../redux/reducers\";\nimport Modal from \"../components/address-modal\";\nimport ContextNav from \"../components/ContextNav\";\nimport { DummyGraph2, Explorer } from \"../icons\";\nimport { userSession, getPerson, getUserData } from \"../scripts/auth\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport delegateSTX from \"../delegation/1.delegatestx\";\nimport \"../assets/css/tippy.css\";\nimport { Right } from \"../components/right\";\nimport delegationLock from \"../delegation/2.delegationLock\";\nimport getStackerInfor from \"../delegation/getStackerInfo\";\n\nimport { Tooltip } from \"react-tippy\";\nconst micro = 1000000;\n\nconst MenuIcon = () => {\n  return (\n    <>\n      <FiSettings\n        aria-label=\"Context\"\n        aria-haspopup=\"true\"\n        className=\"mr-2 text-white wh-4\"\n      />\n    </>\n  );\n};\n\nconst MenuItems = ({ stx, btc, username }) => {\n  const dispatch = useDispatch();\n\n  const deleteAddress = async () => {\n    console.log(username, stx, btc);\n    const makeTheCal = await axios({\n      method: \"delete\",\n      url: `${process.env.REACT_APP_BACKENDURL}/addresses`,\n      data: {\n        username: username,\n        stxAddress: stx,\n        btcAddress: btc,\n      },\n    });\n    console.log(makeTheCal);\n    dispatch({ payload: makeTheCal.data, type: userDetails });\n  };\n\n  return (\n    <>\n      <li\n        className=\"flex items-center text-sm leading-8 text-gray-200 cursor-pointer hover:text-white\"\n        onClick={deleteAddress}\n      >\n        <FiTrash2 className=\"mr-2 wh-3\" />\n        <span>Delete</span>\n      </li>\n      <li className=\"flex items-center text-sm leading-8 text-gray-200 cursor-pointer hover:text-white\">\n        <FiCopy className=\"mr-2 wh-3\" />\n        <span>Copy Address</span>\n      </li>\n    </>\n  );\n};\n\nexport const lineLegends = [{ title: \"Organic\", color: \"bg-teal-600\" }];\n\nconst Left = () => {\n  return (\n    <>\n      <h1 className=\"mb-3 text-2xl\">My Portfolio</h1>\n      <div>{new Date().toLocaleDateString()}</div>\n    </>\n  );\n};\n\nfunction MyPortfolio() {\n  const prices = useSelector((state) => state.prices);\n  const state = useSelector((state) => state.user);\n  const [txs, setTxs] = useState([]);\n  const [portfolio, setPortfolio] = useState({\n    balance: \"0\",\n    total_sent: \"0\",\n    total_received: \"0\",\n    total_fees_sent: \"0\",\n    total_miner_rewards_received: \"0\",\n    lock_tx_id: \"\",\n    locked: \"0\",\n    lock_height: 0,\n    burnchain_lock_height: 0,\n    burnchain_unlock_height: 0,\n  });\n  const [addressValue, setaddressValue] = useState([]);\n  const [stxAddress, setStxAddress] = useState(\"\");\n  const [btcAddress, addBTCAddress] = useState(\"\");\n  const [message, showBTCMessage] = useState(false);\n  const [addaddress, showAddAddress] = useState(false);\n  const [dailyReward, setDailyReward] = useState(0);\n  const [dateForGraph, setDateForGraph] = useState([]);\n  const [rewardForGraph, setRewardForGraph] = useState([]);\n\n  //Address Modal\n  const [isAddressModalOpen, setIsAddressModalOpen] = useState(false);\n\n  function openAddressModal() {\n    setIsAddressModalOpen(true);\n  }\n\n  function closeAddressModal() {\n    setIsAddressModalOpen(false);\n  }\n\n  //Address Modal\n\n  const [isManualAddressModalOpen, setIsManualAddressModalOpen] = useState(\n    false\n  );\n\n  function openManualAddressModal() {\n    setIsManualAddressModalOpen(true);\n  }\n\n  function closeManualAddressModal() {\n    setIsManualAddressModalOpen(false);\n  }\n\n  const [stx, setSTX] = useState(0);\n  const wallet = getPerson();\n\n  const lineOptions = {\n    data: {\n      labels: dateForGraph,\n      datasets: [\n        {\n          backgroundColor: \"#0694a2\",\n          borderColor: \"#0694a2\",\n          data: rewardForGraph,\n          fill: true,\n        },\n      ],\n    },\n    options: {\n      responsive: true,\n      tooltips: {\n        mode: \"index\",\n        intersect: false,\n      },\n      hover: {\n        mode: \"nearest\",\n        intersect: true,\n      },\n      scales: {\n        x: {\n          display: true,\n          scaleLabel: {\n            display: true,\n            labelString: \"Month\",\n          },\n        },\n        y: {\n          display: true,\n          scaleLabel: {\n            display: true,\n            labelString: \"Value\",\n          },\n        },\n      },\n    },\n    legend: {\n      display: false,\n    },\n  };\n\n  useEffect(() => {\n    const data = getPerson();\n    console.log(data);\n    const fetchData = async () => {\n      const result = await axios.get(\n        `https://stacks-node-api.testnet.stacks.co/extended/v1/address/${data._profile.stxAddress}/balances`\n      );\n      setPortfolio(result.data.stx);\n\n      const values = await axios({\n        url: `${process.env.REACT_APP_BACKENDURL}/btcAddressReward`,\n        method: \"post\",\n        data: state,\n      });\n\n      const graph = await axios.post(\n        `${process.env.REACT_APP_BACKENDURL}/getUserClaimedRewardsGraph`,\n        { username: state.username }\n      );\n\n      if (graph.data.length > 0) {\n        setDateForGraph(graph.data.date);\n        setRewardForGraph(graph.data.reward);\n      }\n\n      const claimReward = await axios.post({\n        url: `${process.env.REACT_APP_BACKENDURL}/getUserClaimedRewardsGraph`,\n        data: { username: state.username },\n      });\n\n      if (claimReward.status === 405) {\n        setDailyReward(0);\n      } else {\n        setDailyReward(claimReward.data.value);\n      }\n\n      const vs = [];\n\n      for (let i of state.stxAddress) {\n        try {\n          const result = await axios.get(\n            `https://stacks-node-api.testnet.stacks.co/extended/v1/address/${i}/balances`\n          );\n          console.log(result);\n          vs.push(result.data.stx.balance);\n        } catch (e) {\n          vs.push(0);\n        }\n      }\n\n      setaddressValue(vs);\n      console.log(values.data.txs);\n      if (values.data.txs) setTxs(values.data.txs);\n    };\n    fetchData();\n    getStackerInfor();\n  }, [state, state.username]);\n\n  const addAddress = async () => {\n    const makeTheCal = await axios({\n      method: \"post\",\n      url: `${process.env.REACT_APP_BACKENDURL}/addresses`,\n      data: {\n        username: state.username,\n        stxAddress,\n        btcAddress,\n      },\n    });\n    console.log(makeTheCal);\n  };\n\n  const claim = async () => {\n    if (state.btcAddress.length === 0) {\n      showAddAddress(true);\n    } else {\n      const result = await axios({\n        method: \"post\",\n        url: `${process.env.REACT_APP_BACKENDURL}/btcClaim`,\n        headers: {\n          \"x-auth-token\": localStorage.getItem(\"auth\"),\n          \"Content-Type\": \"application/json\",\n        },\n        data: { username: state.username, btcAddress },\n      });\n      console.log(result);\n      if (result.status === 200) {\n        showBTCMessage(true);\n      }\n    }\n  };\n\n  const onStack = async () => {\n    const delegateStx = await delegateSTX({\n      poxAddr: \"n2VrgRFbKvcesbqerVtJEC8p5Lr2LQKtmB\",\n      amountSTX: stx * micro,\n      delegateToo: \"ST3K2B2FH1AYXD26WV6YZY4DAA82AZNK967BNB9BK\",\n      burnHt: 3,\n    });\n\n    await axios.post(`${process.env.REACT_APP_BACKENDURL}/callHistory`, {\n      functionName: \"delegate-stx\",\n      stxAddress: getPerson()._profile.stxAddress,\n      fee: 300,\n    });\n\n    const delegateLock = await delegationLock({\n      stxValue: stx * micro,\n      htLockPeriod: 10,\n      amountustx: stx * micro,\n      username: state.username,\n      delegateStx,\n    });\n\n    await axios.post(`${process.env.REACT_APP_BACKENDURL}/callHistory`, {\n      functionName: \"delegate-stx\",\n      stxAddress: getPerson()._profile.stxAddress,\n      fee: 300,\n    });\n    console.log(delegateLock, delegateStx);\n  };\n\n  return (\n    <>\n      <PageTitle left={<Left />} right={<Right />}></PageTitle>\n      <div className=\"p-4 space-y-6\">\n        <Card>\n          <CardBody className=\"text-white\">\n            <div className=\"flex flex-wrap\">\n              <div className=\"w-full xl:pr-10 xl:w-1/3\">\n                <div>\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <h3 className=\"text-lg font-medium\">BTC Reward</h3>\n                    <FiInfo />\n                  </div>\n                  <div>\n                    <div className=\"flex flex-wrap items-center justify-between py-2 border-b border-gray-400\">\n                      <span>Total BTC Reward</span>\n                      <span className=\"text-lg text-warning-500\">\n                        {state.totalBTCReward}\n                      </span>\n                    </div>\n                    <div className=\"flex flex-wrap items-center justify-between py-2 border-b border-gray-400\">\n                      <span>Daily BTC Reward</span>\n                      <span className=\"\">{dailyReward}</span>\n                    </div>\n                    <div className=\"flex flex-wrap items-center justify-between py-2 text-gray-300 border-b border-gray-400\">\n                      <span>Pending BTC Reward</span>\n                      <span>{state.pendingBTCReward}</span>\n                    </div>\n                  </div>\n                  <button\n                    className=\"mt-4 mb-6 btn btn-outline-warning btn-sm btn-block\"\n                    onClick={claim}\n                  >\n                    Claim your BTC Reward\n                  </button>\n\n                  {addaddress && (\n                    <p>Please add a btc address for payment checkout.</p>\n                  )}\n                  {message && (\n                    <p>\n                      Please wait for the Admin ( neko@stackedstats.com ) to\n                      confirm your withdrawal.\n                    </p>\n                  )}\n                  <ChartCard title=\"BTC Rewards\">\n                    <Line {...lineOptions} />\n                  </ChartCard>\n                </div>\n              </div>\n              <div className=\"w-full xl:w-2/3\">\n                <div className=\"flex flex-wrap justify-between mb-4\">\n                  <div className=\"flex items-center space-x-2\">\n                    <span>\n                      {\" \"}\n                      <h3 className=\"mr-4 text-lg font-medium\">\n                        BTC Reward History\n                      </h3>\n                    </span>\n                    <div className=\"flex items-center ml-10 text-primary-400\">\n                      <FiDownload />\n                      <span className=\"ml-1\">Export</span>\n                    </div>\n                  </div>\n                  <div className=\"flex space-x-2\">\n                    <button className=\"btn btn-primary btn-xs\">Received</button>\n                    <button className=\"text-white btn btn-outline-gray btn-xs\">\n                      Pending\n                    </button>\n                  </div>\n                </div>\n                <TableContainer className=\"mb-8\">\n                  <Table>\n                    <TableHeader>\n                      <tr>\n                        <TableCell>Date</TableCell>\n                        <TableCell>Network</TableCell>\n                        <TableCell>From</TableCell>\n                        <TableCell>To</TableCell>\n                        <TableCell>Reward</TableCell>\n                        <TableCell>Explorer</TableCell>\n                      </tr>\n                    </TableHeader>\n                    <TableBody className=\"text-lg divide-gray-500\">\n                      {txs.length > 0 &&\n                        txs.map((value, index) => {\n                          return (\n                            <TableRow>\n                              <TableCell>\n                                <div className=\"text-lg text-white\">\n                                  {value.date}\n                                </div>\n                                <span className=\"text-sm\">{value.date}</span>\n                              </TableCell>\n                              <TableCell>\n                                <span className=\"text-white btn btn-outline-gray btn-xs\">\n                                  Testnet\n                                </span>\n                              </TableCell>\n                              <TableCell>\n                                <div className=\"text-sm text-white\">\n                                  Stackedsats\n                                </div>\n                                <span>{value.from}</span>\n                              </TableCell>\n                              <TableCell>\n                                <div className=\"text-sm text-white\">\n                                  {value.to}\n                                </div>\n                                <div className=\"flex items-center text-sm text-warning-500\">\n                                  <FiArrowRight />\n                                  <span className=\"ml-1\">Bitcoin</span>\n                                </div>\n                                {/* <div className=\"flex items-center text-sm text-primary-400\">\n                                <FiArrowRight />\n                                <span className=\"ml-1\">Stacks</span>\n                              </div> */}\n                              </TableCell>\n                              <TableCell>\n                                <div className=\"text-sm text-white\">\n                                  {value.reward} STX\n                                </div>\n                                <div className=\"text-sm\">\n                                  <span className=\"text-warning-500\">\n                                    {parseFloat(\n                                      value.reward /\n                                        (prices.stxusd * prices.btcusd)\n                                    ).toFixed(2)}\n                                  </span>{\" \"}\n                                  BTC |{\" \"}\n                                  <span className=\"text-success-600\">\n                                    {parseFloat(\n                                      prices.stxusd / value.reward\n                                    ).toFixed(2)}\n                                  </span>{\" \"}\n                                  USD\n                                </div>\n                              </TableCell>\n                              <TableCell>\n                                <a href=\"https://testnet-explorer.blockstack.org/txid/0x7f5db3a604f738af695b0b10c0369c42fd7a0efbcc25115fa5711f074abf92b6\">\n                                  <div className=\"flex justify-center\">\n                                    <Explorer />\n                                  </div>\n                                </a>\n                              </TableCell>\n                            </TableRow>\n                          );\n                        })}\n                    </TableBody>\n                  </Table>\n                </TableContainer>\n              </div>\n            </div>\n          </CardBody>\n        </Card>\n\n        <div className=\"grid gap-6 mb-8 xl:grid-cols-3\">\n          <Card>\n            <Modal\n              openAddressModal={openAddressModal}\n              closeAddressModal={closeAddressModal}\n              openManualAddressModal={openManualAddressModal}\n              closeManualAddressModal={closeManualAddressModal}\n              isAddressModalOpen={isAddressModalOpen}\n              isManualAddressModalOpen={isManualAddressModalOpen}\n              addBTCAddress={addBTCAddress}\n              addAddress={addAddress}\n              stxAddress={stxAddress}\n              setStxAddress={setStxAddress}\n            />\n            <CardBody className=\"space-y-8 text-white\">\n              <div className=\"flex flex-wrap justify-between\">\n                <div className=\"flex flex-wrap items-center\">\n                  <h2 className=\"mr-3 text-2xl font-medium\">Portfolio</h2>\n                  <span className=\"text-gray-200\">\n                    {1 + state.btcAddress.length}\n                  </span>\n                </div>\n              </div>\n              {/* body */}\n              <div className=\"flex flex-wrap justify-between\">\n                <div className=\"flex items-baseline space-x-2\">\n                  <span className=\"text-2xl\">STX</span>\n                  {/* <span className=\"text-gray-200\">100%</span> */}\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <span className=\"text-2xl\">\n                    {prices.stxusd * addressValue.reduce((a, b) => a + b, 0)}\n                  </span>\n                  <span className=\"font-medium text-gray-200\">STX</span>\n                </div>\n              </div>\n              <div>\n                <div className=\"flex flex-wrap justify-between mb-3 text-gray-200\">\n                  <div className=\"flex\">\n                    <span>{state.stxAddress.length} addresses</span>\n                  </div>\n                  <div className=\"flex\">\n                    <span>\n                      {prices.stxusd * addressValue.reduce((a, b) => a + b, 0)}\n                    </span>\n                  </div>\n                </div>\n\n                <ul>\n                  {state.stxAddress.map((value, index) => {\n                    return (\n                      <li className=\"p-2 mb-1 border-l-4 cursor-pointer hover:bg-primary-400 bg-primary-600 border-primary-300\">\n                        <div className=\"flex flex-wrap justify-between\">\n                          <div className=\"flex flex-wrap items-center space-x-3\">\n                            <span>{value}</span>\n                            <ContextNav\n                              menuItems={\n                                <MenuItems\n                                  stx={value}\n                                  username={state.username}\n                                />\n                              }\n                              buttonIcon={<MenuIcon />}\n                            ></ContextNav>\n                          </div>\n                          <div className=\"flex\">\n                            <span>{addressValue[index]}</span>\n                          </div>\n                        </div>\n                      </li>\n                    );\n                  })}\n                </ul>\n              </div>\n              <hr className=\"border-gray-500\" />\n              <div className=\"flex flex-wrap justify-between\">\n                <div className=\"flex items-baseline space-x-2\">\n                  <span className=\"text-2xl\">BTC</span>\n                  {/* <span className=\"text-gray-200\">100%</span> */}\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <span className=\"text-2xl\">\n                    {addressValue.reduce((a, b) => a + b, 0)}\n                  </span>\n                  <span className=\"font-medium text-gray-200\">BTC</span>\n                </div>\n              </div>\n              <div>\n                <div className=\"flex flex-wrap justify-between mb-3 text-gray-200\">\n                  <div className=\"flex\">\n                    <span>{state.btcAddress.length} Addresses</span>\n                  </div>\n                  <div className=\"flex\">\n                    <span>\n                      {prices.stxusd * addressValue.reduce((a, b) => a + b, 0)}\n                    </span>\n                  </div>\n                </div>\n\n                <ul>\n                  {state.btcAddress.map((value, index) => {\n                    return (\n                      <li className=\"p-2 mb-1 border-l-4 cursor-pointer hover:bg-primary-400 bg-primary-600 border-primary-300\">\n                        <div className=\"flex flex-wrap justify-between\">\n                          <div className=\"flex flex-wrap items-center space-x-3\">\n                            <span>{value}</span>\n                            <ContextNav\n                              menuItems={\n                                <MenuItems\n                                  btc={value}\n                                  username={state.username}\n                                />\n                              }\n                              buttonIcon={<MenuIcon />}\n                            ></ContextNav>\n                          </div>\n                          <div className=\"flex\">\n                            <span>{addressValue[index]}</span>\n                          </div>\n                        </div>\n                      </li>\n                    );\n                  })}\n                </ul>\n              </div>\n            </CardBody>\n          </Card>\n          <Card>\n            <CardBody className=\"space-y-8 text-white\">\n              <div className=\"flex flex-wrap justify-between\">\n                <div className=\"flex flex-wrap items-center\">\n                  <h2 className=\"mr-3 text-2xl font-medium\">STX balance</h2>\n                </div>\n                <div>\n                  <Select className=\"py-1 pl-2 mt-1 bg-transparent border-gray-300 leading-1\">\n                    <option>USD</option>\n                  </Select>\n                </div>\n              </div>\n              <div>\n                <div className=\"flex flex-wrap items-center justify-between py-2 border-b border-gray-400\">\n                  <div className=\"flex space-x-2\">\n                    <span>Total Balance</span>\n                  </div>\n                  <div className=\"flex space-x-2\">\n                    <span className=\"text-lg font-medium text-success-400\">\n                      {portfolio.balance / 1000000}\n                    </span>\n                  </div>\n                </div>\n                <div className=\"flex flex-wrap items-center justify-between py-2 border-b border-gray-400\">\n                  <div className=\"flex space-x-2\">\n                    <span>Available Balance</span>\n                  </div>\n                  <div className=\"flex space-x-2\">\n                    <span>\n                      {(portfolio.balance - portfolio.locked) / 1000000}\n                    </span>\n                  </div>\n                </div>\n                <div className=\"flex flex-wrap items-center justify-between py-2\">\n                  <div className=\"flex space-x-2\">\n                    <span>Stacking Balance</span>\n                  </div>\n                  <div className=\"flex space-x-2\">\n                    <Input\n                      className=\"py-3 mb-3 text-white bg-gray-800 border-none text-right\"\n                      placeholder=\"STX Value\"\n                      type=\"number\"\n                      value={stx}\n                      onChange={(e) => {\n                        setSTX(e.target.value);\n                      }}\n                    ></Input>\n                  </div>\n                </div>\n              </div>\n              <div>\n                <div className=\"flex justify-end mb-4\">\n                  <div>\n                    <Select className=\"py-1 pl-2 mt-1 bg-transparent border-gray-300 leading-1\">\n                      <option>Daily</option>\n                    </Select>\n                  </div>\n                </div>\n                {/* <ChartCard title=\"Lines\">\n                  <Line {...lineOptions} />\n                  <ChartLegend legends={lineLegends} />\n                </ChartCard> */}\n              </div>\n              <button\n                className=\"mt-4 mb-6 btn btn-outline-primary btn-sm btn-block\"\n                onClick={onStack}\n              >\n                Stack now\n              </button>\n            </CardBody>\n          </Card>\n          <Card>\n            <CardBody className=\"space-y-8 text-white\">\n              <div className=\"flex flex-wrap justify-between\">\n                <div className=\"flex flex-wrap items-center\">\n                  <h2 className=\"mr-3 text-2xl font-medium\">BTC balance</h2>\n                </div>\n                <div>\n                  <Select className=\"py-1 pl-2 mt-1 bg-transparent border-gray-300 leading-1\">\n                    <option>USD</option>\n                  </Select>\n                </div>\n              </div>\n              <div>\n                <div className=\"flex flex-wrap items-center justify-between py-2 border-b border-gray-400\">\n                  <div className=\"flex space-x-2\">\n                    <span>Total Balance</span>\n                  </div>\n                  <div className=\"flex space-x-2\">\n                    <span className=\"text-lg font-medium text-success-400\">\n                      {parseFloat(\n                        portfolio.balance /\n                          1000000 /\n                          (prices.stxusd * prices.btcusd)\n                      ).toFixed(2)}\n                      BTC\n                    </span>\n                  </div>\n                </div>\n                <div className=\"flex flex-wrap items-center justify-between py-2 border-b border-gray-400\">\n                  <div className=\"flex space-x-2\">\n                    <span>Available Balance</span>\n                  </div>\n                  <div className=\"flex space-x-2\">\n                    <span>\n                      {\" \"}\n                      {parseFloat(\n                        (portfolio.balance - portfolio.locked) /\n                          1000000 /\n                          (prices.stxusd * prices.btcusd)\n                      ).toFixed(2)}{\" \"}\n                      BTC\n                    </span>\n                  </div>\n                </div>\n                <div className=\"flex flex-wrap items-center justify-between py-2\">\n                  <div className=\"flex space-x-2\">\n                    <span>Stacking Balance</span>\n                  </div>\n                  <div className=\"flex space-x-2\">\n                    <span>\n                      {parseFloat(\n                        stx / (prices.stxusd * prices.btcusd)\n                      ).toFixed(2)}{\" \"}\n                      BTV\n                    </span>\n                  </div>\n                </div>\n              </div>\n              <div>\n                <div className=\"flex justify-end mb-4\">\n                  <div>\n                    <Select className=\"py-1 pl-2 mt-1 bg-transparent border-gray-300 leading-1\">\n                      <option>Staked</option>\n                    </Select>\n                  </div>\n                </div>\n                {/* <ChartCard title=\"Lines\">\n                  <Line {...lineOptions} />\n                  <ChartLegend legends={lineLegends} />\n                </ChartCard> */}\n              </div>\n              <button className=\"mt-4 mb-6 btn btn-outline-gray btn-sm btn-block\">\n                Stack now\n              </button>\n            </CardBody>\n          </Card>\n        </div>\n        <div></div>\n      </div>\n    </>\n  );\n}\n\nexport default MyPortfolio;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nexport const Right = () => {\n  const prices = useSelector((state) => state.prices);\n  return (\n    <>\n      <div className=\"text-gray-300 \">\n        <p className=\"mb-2\">Total Volume</p>\n        <div>\n          <b className=\"mr-2 text-3xl font-normal text-white\">\n            {prices.liquidStxSupplyResult} STX\n          </b>{\" \"}\n          <span>\n            <span className=\"text-yellow-500\">\n              {\" \"}\n              {(\n                (prices.stxusd * prices.liquidStxSupplyResult) /\n                prices.btcusd\n              ).toLocaleString(\"fullwide\", { useGrouping: false })}\n            </span>{\" \"}\n            BTC |{\" \"}\n            <span className=\"text-green-600\">\n              {\" \"}\n              {(\n                prices.stxusd * prices.liquidStxSupplyResult\n              ).toLocaleString(\"fullwide\", { useGrouping: false })}\n            </span>{\" \"}\n            USD\n          </span>\n        </div>\n      </div>\n    </>\n  );\n};\n","import React from \"react\";\n\nfunction Chart({ children, title }) {\n  return (\n    <div className=\"min-w-0 p-4 bg-gray-800 rounded-lg shadow-xs\">\n      <p className=\"mb-4 font-semibold text-gray-300\">{title}</p>\n      {children}\n    </div>\n  );\n}\n\nexport default Chart;\n","import React from \"react\";\n\nfunction ChartLegend({ legends }) {\n  return (\n    <div className=\"flex justify-center mt-4 space-x-3 text-sm text-gray-400\">\n      {legends.map((legend) => (\n        <div className=\"flex items-center\" key={legend.title}>\n          <span\n            className={`inline-block w-3 h-3 mr-1 ${legend.color} rounded-full`}\n          ></span>\n          <span>{legend.title}</span>\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default ChartLegend;\n","import React, { useState } from \"react\";\nimport { Dropdown } from \"@windmill/react-ui\";\n\nfunction ContextNav({ menuItems, buttonIcon }) {\n  const [isContextMenuOpen, setIsContextMenuOpen] = useState(false);\n  function handleContextClick() {\n    setIsContextMenuOpen(!isContextMenuOpen);\n  }\n  return (\n    <div className=\"relative flex items-center\">\n      <button onClick={handleContextClick}>{buttonIcon}</button>\n\n      <Dropdown\n        className=\"z-50 w-32 bg-gray-700\"\n        isOpen={isContextMenuOpen}\n        onClose={() => setIsContextMenuOpen(false)}\n      >\n        {menuItems}\n      </Dropdown>\n    </div>\n  );\n}\n\nexport default ContextNav;\n","import React from \"react\";\n\nfunction PageTitle({ children, left, right }) {\n  if (children) {\n    return (\n      <div className=\"flex items-center justify-between px-8 pt-10 pb-8 mb-8 -mx-6 text-gray-100 border-b-2 border-gray-900 bg-gray-950\">\n        <h1 show={children} className=\"mb-3 text-2xl\">\n          {children}\n        </h1>\n      </div>\n    );\n  }\n\n  if (!children) {\n    return (\n      <div className=\"flex flex-wrap items-center justify-between px-12 pt-10 pb-8 mb-8 -mx-6 text-gray-100 border-b-2 border-gray-900 bg-gray-950\">\n        <div>{left}</div>\n        <div>{right}</div>\n      </div>\n    );\n  }\n}\n\nexport default PageTitle;\n"],"sourceRoot":""}